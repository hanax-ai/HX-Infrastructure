---
# Task 3.03 - Role Skeleton and Template Validation
# Purpose: Ensure the Ansible role structure for LiteLLM is present and templates are valid
# This playbook creates the role structure and validates templates with current group variables

- name: LiteLLM Role Structure and Template Validation
  hosts: localhost
  gather_facts: no
  tags:
    - role
    - validation
  
  vars:
    ansible_base_dir: "{{ playbook_dir }}/../.."
    role_base_dir: "{{ playbook_dir }}/roles/hx_litellm_proxy"
    timestamp: "{{ ansible_date_time.epoch }}"
    evidence_dir: "{{ ansible_base_dir }}/.evidence/litellm_role_validation/{{ timestamp }}"
    
    # Role directory structure
    role_directories:
      - "{{ role_base_dir }}"
      - "{{ role_base_dir }}/tasks"
      - "{{ role_base_dir }}/templates"
      - "{{ role_base_dir }}/defaults"
      - "{{ role_base_dir }}/handlers"
      - "{{ role_base_dir }}/meta"
    
    # Test variables for template rendering (simulate group_vars)
    test_vars:
      litellm_bind_host: "0.0.0.0"
      litellm_bind_port: 4000
      litellm_base_url: "http://hx-api-server.dev-test.hana-x.ai:4000"
      litellm_backends:
        - "http://hx-llm01-server.dev-test.hana-x.ai:11434"
        - "http://hx-llm02-server.dev-test.hana-x.ai:11434"
      litellm_models:
        - name: "phi3-3.8b"
          provider: "ollama"
          model: "phi3:3.8b-mini-128k-instruct-q8_0"
        - name: "llama3-8b"
          provider: "ollama"
          model: "llama3:8b-instruct-q8_0"
      litellm_master_key: "sk-test-master-key-for-validation"
      litellm_request_timeout: 30
      litellm_max_retries: 3

  tasks:
    # Section 1: Create evidence directory
    - name: "Evidence | Create evidence directory"
      ansible.builtin.file:
        path: "{{ evidence_dir }}"
        state: directory
        mode: '0755'

    # Section 2: Create role directory structure
    - name: "Role Structure | Create role directories"
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
      loop: "{{ role_directories }}"
      register: dir_creation

    - name: "Role Structure | Report directory creation"
      ansible.builtin.debug:
        msg: "Created {{ dir_creation.results | selectattr('changed') | list | length }} new directories"

    # Section 3: Check for existing templates
    - name: "Templates | Check if templates already exist"
      ansible.builtin.stat:
        path: "{{ item }}"
      loop:
        - "{{ role_base_dir }}/templates/litellm.config.yaml.j2"
        - "{{ role_base_dir }}/templates/litellm.env.j2"
      register: template_checks

    - name: "Templates | Set template existence facts"
      ansible.builtin.set_fact:
        config_template_exists: "{{ template_checks.results[0].stat.exists | default(false) }}"
        env_template_exists: "{{ template_checks.results[1].stat.exists | default(false) }}"

    # Section 4: Create placeholder templates if they don't exist
    - name: "Templates | Create litellm.config.yaml.j2 placeholder"
      ansible.builtin.copy:
        dest: "{{ role_base_dir }}/templates/litellm.config.yaml.j2"
        content: |
          # LiteLLM proxy configuration - OpenAI-compatible
          # Generated by Ansible role hx_litellm_proxy
          
          model_list:
          {% for m in litellm_models %}
          {% for b in litellm_backends %}
            - model_name: {{ m.name | quote }}
              litellm_params:
                model: {{ m.model | quote }}
                api_base: {{ b | quote }}
                api_key: ""
                request_timeout: 30
                mode: "chat"
              max_input_tokens: 2048
              num_retries: 2
          {% endfor %}
          {% endfor %}
          
          router_settings:
            timeout: 60
            retry_policy: "simple"
            routing_strategy: "least-busy"
          
          general_settings:
            master_key: {{ litellm_master_key | quote }}
            telemetry: false
      when: not config_template_exists

    - name: "Templates | Create litellm.env.j2 placeholder"
      ansible.builtin.copy:
        dest: "{{ role_base_dir }}/templates/litellm.env.j2"
        content: |
          # LiteLLM environment variables
          # No secrets here - auth is in config.yaml
          LITELLM_HOST={{ litellm_bind_host }}
          LITELLM_PORT={{ litellm_bind_port }}
          LITELLM_TELEMETRY=false
      when: not env_template_exists

    # Section 5: Validate template rendering
    - name: "Validation | Test render config template"
      ansible.builtin.template:
        src: "{{ role_base_dir }}/templates/litellm.config.yaml.j2"
        dest: "{{ evidence_dir }}/litellm.config.yaml.rendered"
      vars:
        litellm_bind_host: "{{ test_vars.litellm_bind_host }}"
        litellm_bind_port: "{{ test_vars.litellm_bind_port }}"
        litellm_base_url: "{{ test_vars.litellm_base_url }}"
        litellm_backends: "{{ test_vars.litellm_backends }}"
        litellm_models: "{{ test_vars.litellm_models }}"
        litellm_master_key: "{{ test_vars.litellm_master_key }}"
        litellm_request_timeout: "{{ test_vars.litellm_request_timeout }}"
        litellm_max_retries: "{{ test_vars.litellm_max_retries }}"
      register: config_render

    - name: "Validation | Test render env template"
      ansible.builtin.template:
        src: "{{ role_base_dir }}/templates/litellm.env.j2"
        dest: "{{ evidence_dir }}/litellm.env.rendered"
      vars:
        litellm_bind_host: "{{ test_vars.litellm_bind_host }}"
        litellm_bind_port: "{{ test_vars.litellm_bind_port }}"
        litellm_base_url: "{{ test_vars.litellm_base_url }}"
        litellm_backends: "{{ test_vars.litellm_backends }}"
        litellm_models: "{{ test_vars.litellm_models }}"
        litellm_master_key: "{{ test_vars.litellm_master_key }}"
        litellm_request_timeout: "{{ test_vars.litellm_request_timeout }}"
        litellm_max_retries: "{{ test_vars.litellm_max_retries }}"
      register: env_render

    - name: "Validation | Check rendered config for required elements"
      ansible.builtin.lineinfile:
        path: "{{ evidence_dir }}/litellm.config.yaml.rendered"
        line: "{{ item }}"
        state: present
      register: config_checks
      loop:
        - "model_list:"
        - "router_settings:"
        - "general_settings:"
        - "master_key:"
      changed_when: false
      failed_when: config_checks.results | selectattr('matched', 'equalto', 1) | list | length == 0

    - name: "Validation | Validate YAML syntax of rendered config"
      ansible.builtin.shell: |
        python3 -c "import yaml; yaml.safe_load(open('{{ evidence_dir }}/litellm.config.yaml.rendered'))"
      register: yaml_validation
      changed_when: false

    # Section 6: Create role metadata
    - name: "Metadata | Create role meta/main.yml"
      ansible.builtin.copy:
        dest: "{{ role_base_dir }}/meta/main.yml"
        content: |
          ---
          galaxy_info:
            author: HX Infrastructure Team
            description: LiteLLM OpenAI-compatible proxy for Ollama backends
            company: HanaX AI
            license: MIT
            min_ansible_version: "2.10"
            platforms:
              - name: Ubuntu
                versions:
                  - jammy
                  - focal
          
          dependencies: []

    - name: "Defaults | Create role defaults/main.yml"
      ansible.builtin.copy:
        dest: "{{ role_base_dir }}/defaults/main.yml"
        content: |
          ---
          # Default values for hx_litellm_proxy role
          
          # Service user
          litellm_user: litellm
          litellm_group: litellm
          litellm_home: /home/litellm
          
          # Installation paths
          litellm_venv_path: "{{ litellm_home }}/litellm-venv"
          litellm_config_dir: /etc/litellm
          
          # Service configuration
          litellm_service_name: litellm
          litellm_service_restart_sec: 3
          
          # Python version
          litellm_python_version: "3.11"

    # Section 7: Create placeholder task files
    - name: "Tasks | Create placeholder main.yml"
      ansible.builtin.copy:
        dest: "{{ role_base_dir }}/tasks/main.yml"
        content: |
          ---
          # Main tasks for hx_litellm_proxy role
          # This file will be populated with the actual deployment tasks
          
          - name: Placeholder task
            ansible.builtin.debug:
              msg: "Role tasks will be implemented here"

    - name: "Handlers | Create handlers/main.yml"
      ansible.builtin.copy:
        dest: "{{ role_base_dir }}/handlers/main.yml"
        content: |
          ---
          # Handlers for hx_litellm_proxy role
          
          - name: restart litellm
            ansible.builtin.systemd:
              name: litellm
              state: restarted
              daemon_reload: yes
          
          - name: reload systemd
            ansible.builtin.systemd:
              daemon_reload: yes

    # Section 8: Analyze missing variables
    - name: "Analysis | Load current group_vars"
      ansible.builtin.include_vars:
        file: "{{ ansible_base_dir }}/inventories/group_vars/all/main.yml"
      register: loaded_vars
      ignore_errors: yes

    - name: "Analysis | Check for missing variables"
      ansible.builtin.set_fact:
        missing_vars: []

    - name: "Analysis | Identify missing required variables"
      ansible.builtin.set_fact:
        missing_vars: "{{ missing_vars + [item] }}"
      when: item not in loaded_vars.ansible_facts
      loop:
        - litellm_bind_host
        - litellm_bind_port
        - litellm_backends
        - litellm_models
      ignore_errors: yes

    # Section 9: Generate validation report
    - name: "Report | Generate validation report"
      ansible.builtin.copy:
        content: |
          LiteLLM Role Validation Report
          ==============================
          Timestamp: {{ ansible_date_time.iso8601 }}
          
          Role Structure:
          --------------
          Base Directory: {{ role_base_dir }}
          Directories Created: {{ dir_creation.results | selectattr('changed') | list | length }}
          
          Template Status:
          ----------------
          litellm.config.yaml.j2: {% if config_template_exists %}Existed{% else %}Created{% endif %}
          litellm.env.j2: {% if env_template_exists %}Existed{% else %}Created{% endif %}
          
          Template Rendering:
          -------------------
          Config Template: {% if config_render is succeeded %}✓ Success{% else %}✗ Failed{% endif %}
          Env Template: {% if env_render is succeeded %}✓ Success{% else %}✗ Failed{% endif %}
          YAML Validation: {% if yaml_validation.rc == 0 %}✓ Valid{% else %}✗ Invalid{% endif %}
          
          Required Elements Found:
          ------------------------
          {% for check in config_checks.results %}
          - {{ check.item }}: ✓
          {% endfor %}
          
          Missing Variables:
          ------------------
          {% if missing_vars | length > 0 %}
          {% for var in missing_vars %}
          - {{ var }}
          {% endfor %}
          {% else %}
          None - all required variables are present
          {% endif %}
          
          Role Files Created:
          -------------------
          - meta/main.yml
          - defaults/main.yml
          - tasks/main.yml (placeholder)
          - handlers/main.yml
          - templates/litellm.config.yaml.j2
          - templates/litellm.env.j2
          
          Rendered Templates:
          -------------------
          - {{ evidence_dir }}/litellm.config.yaml.rendered
          - {{ evidence_dir }}/litellm.env.rendered
          
          Next Steps:
          -----------
          1. Review rendered templates in evidence directory
          2. Implement actual tasks in tasks/main.yml
          3. Add systemd service configuration
          4. Run deployment playbook
        dest: "{{ evidence_dir }}/validation_report.txt"

    - name: "Report | Display validation summary"
      ansible.builtin.debug:
        msg: |
          =====================================================
          LiteLLM Role Validation Complete
          =====================================================
          
          Role Structure: ✓ Created at {{ role_base_dir }}
          Templates: ✓ Created and validated
          YAML Syntax: ✓ Valid
          
          Evidence saved to: {{ evidence_dir }}
          
          The role skeleton is ready for implementation!