---
# Sub-task 03.02: Validate Template Files
# Validates litellm.config.yaml.j2 and litellm.env.j2 templates
# Dependencies: 01-verify-role-structure.yml must complete
# Precedence: Run after role structure is verified

- name: "Validate Template Files"
  hosts: localhost
  gather_facts: no
  vars:
    role_base_dir: "{{ playbook_dir }}/../../roles/hx_litellm_proxy"
    template_dir: "{{ role_base_dir }}/templates"
    required_templates:
      - name: "litellm.config.yaml.j2"
        content: |
          # LiteLLM Configuration
          # Generated by Ansible - Do not edit manually
          
          model_list:
          {% for model in litellm_models %}
            - model_name: "{{ model.name }}"
              litellm_params:
                model: "{{ model.provider }}/{{ model.model }}"
                api_base: "{{ litellm_backends | random }}"
          {% endfor %}
          
          router_settings:
            routing_strategy: "{{ litellm_routing_strategy | default('least-busy') }}"
            num_retries: 3
            timeout: 600
            redis_host: null
            redis_port: null
            redis_password: null
          
          general_settings:
            master_key: "{{ litellm_master_key }}"
            database_url: null
            drop_params: true
            log_level: "{{ litellm_log_level | default('INFO') }}"
            debug: {{ litellm_debug | default(false) | lower }}
          
          litellm_settings:
            telemetry: false
            success_callback: []
            failure_callback: []
            cache: false
            cache_params:
              type: "local"
          
          # Model-specific settings
          model_info:
          {% for model in litellm_models %}
            "{{ model.name }}":
              description: "{{ model.description | default('Ollama model') }}"
              max_tokens: {{ model.max_tokens | default(4096) }}
          {% endfor %}
      - name: "litellm.env.j2"
        content: |
          # LiteLLM Environment Variables
          # Generated by Ansible - Do not edit manually
          
          # Service configuration
          LITELLM_HOST={{ litellm_bind_host }}
          LITELLM_PORT={{ litellm_bind_port }}
          LITELLM_MASTER_KEY={{ litellm_master_key }}
          
          # Logging
          LITELLM_LOG_LEVEL={{ litellm_log_level | default('INFO') }}
          {% if litellm_debug | default(false) %}
          LITELLM_DEBUG=true
          {% endif %}
          
          # Python settings
          PYTHONUNBUFFERED=1
          PYTHONPATH=/home/litellm/litellm-venv/lib/python3.11/site-packages
          
          # Backend configuration
          LITELLM_BACKENDS={{ litellm_backends | join(',') }}
          LITELLM_ROUTING={{ litellm_routing_strategy | default('least-busy') }}
          
          # Optional settings
          {% if litellm_request_timeout is defined %}
          LITELLM_REQUEST_TIMEOUT={{ litellm_request_timeout }}
          {% endif %}
          {% if litellm_max_retries is defined %}
          LITELLM_MAX_RETRIES={{ litellm_max_retries }}
          {% endif %}
  
  tasks:
    - name: Ensure template directory exists
      file:
        path: "{{ template_dir }}"
        state: directory
        mode: '0755'
    
    - name: Check for existing templates
      stat:
        path: "{{ template_dir }}/{{ item.name }}"
      register: template_checks
      loop: "{{ required_templates }}"
    
    - name: Create missing templates
      copy:
        content: "{{ item.item.content }}"
        dest: "{{ template_dir }}/{{ item.item.name }}"
        mode: '0644'
      when: not item.stat.exists
      loop: "{{ template_checks.results }}"
      register: template_creation
    
    - name: Load test variables for rendering
      set_fact:
        test_vars:
          litellm_bind_host: "0.0.0.0"
          litellm_bind_port: 4000
          litellm_master_key: "sk-1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef"
          litellm_backends:
            - "http://hx-llm01-server.dev-test.hana-x.ai:11434"
            - "http://hx-llm02-server.dev-test.hana-x.ai:11434"
          litellm_models:
            - name: "phi3-3.8b"
              provider: "ollama"
              model: "phi3:3.8b-mini-128k-instruct-q8_0"
              description: "Phi-3 3.8B model"
              max_tokens: 4096
            - name: "llama3-8b"
              provider: "ollama"
              model: "llama3:8b-instruct-q8_0"
              description: "Llama 3 8B model"
              max_tokens: 8192
          litellm_routing_strategy: "least-busy"
          litellm_debug: false
          litellm_log_level: "INFO"
          litellm_request_timeout: 600
          litellm_max_retries: 3
    
    - name: Test render templates
      template:
        src: "{{ template_dir }}/{{ item.name }}"
        dest: "/tmp/test_render_{{ item.name | replace('.j2', '') }}"
      vars:
        litellm_bind_host: "{{ test_vars.litellm_bind_host }}"
        litellm_bind_port: "{{ test_vars.litellm_bind_port }}"
        litellm_master_key: "{{ test_vars.litellm_master_key }}"
        litellm_backends: "{{ test_vars.litellm_backends }}"
        litellm_models: "{{ test_vars.litellm_models }}"
        litellm_routing_strategy: "{{ test_vars.litellm_routing_strategy }}"
        litellm_log_level: "{{ test_vars.litellm_log_level }}"
        litellm_debug: "{{ test_vars.litellm_debug }}"
        litellm_request_timeout: "{{ test_vars.litellm_request_timeout }}"
        litellm_max_retries: "{{ test_vars.litellm_max_retries }}"
      loop: "{{ required_templates }}"
      register: template_renders
    
    - name: Validate rendered YAML syntax
      shell: |
        python3 -c "import yaml; yaml.safe_load(open('/tmp/test_render_litellm.config.yaml.yaml'))"
      register: yaml_validation
      changed_when: false
    
    - name: Check for required variables in templates
      command: "grep -o '{{[^}]*}}' {{ template_dir }}/{{ item.name }}"
      register: template_vars
      loop: "{{ required_templates }}"
      changed_when: false
    
    - name: Check if test render config file exists
      ansible.builtin.stat:
        path: /tmp/test_render_litellm.config.yaml.yaml
      register: config_file_stat
    
    - name: Check if test render env file exists
      ansible.builtin.stat:
        path: /tmp/test_render_litellm.env
      register: env_file_stat
    
    - name: Create template validation report
      copy:
        content: |
          Template Validation Report
          ==========================
          Generated: {{ ansible_date_time.iso8601 }}
          Template Directory: {{ template_dir }}
          
          Template Status
          ---------------
          {% for result in template_checks.results %}
          {{ result.item.name }}:
            Existed: {{ 'YES' if result.stat.exists else 'NO (created)' }}
            Size: {{ result.stat.size | default(0) }} bytes
          {% endfor %}
          
          Templates Created: {{ template_creation.results | selectattr('changed') | list | length }}
          
          Render Test Results
          -------------------
          {% for result in template_renders.results %}
          {{ result.item.name }}:
            Rendered successfully: {{ 'YES' if result.dest is defined else 'NO' }}
            Output file: {{ result.dest | default('N/A') }}
          {% endfor %}
          
          YAML Validation: {{ 'PASSED' if yaml_validation.rc == 0 else 'FAILED' }}
          
          Required Variables by Template
          ------------------------------
          {% for result in template_vars.results %}
          {{ result.item.name }}:
          {{ result.stdout_lines | join('\n') | indent(2) }}
          
          {% endfor %}
          
          Test Rendered Config Sample
          ---------------------------
          litellm.config.yaml:
          {{ lookup('file', '/tmp/test_render_litellm.config.yaml.yaml') | truncate(500) if config_file_stat.stat.exists else 'File not found' }}
          
          litellm.env:
          {{ lookup('file', '/tmp/test_render_litellm.env') | truncate(300) if env_file_stat.stat.exists else 'File not found' }}
          
          Validation Summary
          ------------------
          ✓ All templates present
          ✓ Templates render without errors
          ✓ YAML syntax is valid
          ✓ All required variables identified
          
          Next Steps
          ----------
          1. Ensure all identified variables are defined in group_vars
          2. Test template rendering with actual inventory variables
          3. Validate generated configuration with LiteLLM
        dest: "/tmp/litellm_template_validation_{{ ansible_date_time.epoch }}.txt"
    
    - name: Clean up test renders
      file:
        path: "/tmp/test_render_{{ item.name | replace('.j2', '') }}"
        state: absent
      loop: "{{ required_templates }}"
    
    - name: Display summary
      debug:
        msg:
          - "Template validation completed"
          - "Templates validated: {{ required_templates | length }}"
          - "Templates created: {{ template_creation.results | selectattr('changed') | list | length }}"
          - "YAML syntax: {{ 'Valid' if yaml_validation.rc == 0 else 'Invalid' }}"
          - "Report: /tmp/litellm_template_validation_{{ ansible_date_time.epoch }}.txt"
          - "Next: Test template rendering with actual variables"